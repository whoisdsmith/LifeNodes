/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ChatPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/view.ts
var import_obsidian = require("obsidian");

// src/common.ts
var PLUGIN_ID = "arenasys-ai-chat";
var HTTPStatus = {
  "0": "Unknown",
  "200": "OK",
  "201": "Created",
  "202": "Accepted",
  "203": "Non-Authoritative Information",
  "204": "No Content",
  "205": "Reset Content",
  "206": "Partial Content",
  "300": "Multiple Choices",
  "301": "Moved Permanently",
  "302": "Found",
  "303": "See Other",
  "304": "Not Modified",
  "305": "Use Proxy",
  "306": "Unused",
  "307": "Temporary Redirect",
  "400": "Bad Request",
  "401": "Unauthorized",
  "402": "Payment Required",
  "403": "Forbidden",
  "404": "Not Found",
  "405": "Method Not Allowed",
  "406": "Not Acceptable",
  "407": "Proxy Authentication Required",
  "408": "Request Timeout",
  "409": "Conflict",
  "410": "Gone",
  "411": "Length Required",
  "412": "Precondition Required",
  "413": "Request Entry Too Large",
  "414": "Request-URI Too Long",
  "415": "Unsupported Media Type",
  "416": "Requested Range Not Satisfiable",
  "417": "Expectation Failed",
  "418": "I'm a teapot",
  "429": "Too Many Requests",
  "500": "Internal Server Error",
  "501": "Not Implemented",
  "502": "Bad Gateway",
  "503": "Service Unavailable",
  "504": "Gateway Timeout",
  "505": "HTTP Version Not Supported"
};

// node_modules/eventsource-parser/dist/index.js
function createParser(onParse) {
  let isFirstChunk;
  let buffer;
  let startingPosition;
  let startingFieldLength;
  let eventId;
  let eventName;
  let data;
  reset();
  return {
    feed,
    reset
  };
  function reset() {
    isFirstChunk = true;
    buffer = "";
    startingPosition = 0;
    startingFieldLength = -1;
    eventId = void 0;
    eventName = void 0;
    data = "";
  }
  function feed(chunk) {
    buffer = buffer ? buffer + chunk : chunk;
    if (isFirstChunk && hasBom(buffer)) {
      buffer = buffer.slice(BOM.length);
    }
    isFirstChunk = false;
    const length = buffer.length;
    let position = 0;
    let discardTrailingNewline = false;
    while (position < length) {
      if (discardTrailingNewline) {
        if (buffer[position] === "\n") {
          ++position;
        }
        discardTrailingNewline = false;
      }
      let lineLength = -1;
      let fieldLength = startingFieldLength;
      let character;
      for (let index = startingPosition; lineLength < 0 && index < length; ++index) {
        character = buffer[index];
        if (character === ":" && fieldLength < 0) {
          fieldLength = index - position;
        } else if (character === "\r") {
          discardTrailingNewline = true;
          lineLength = index - position;
        } else if (character === "\n") {
          lineLength = index - position;
        }
      }
      if (lineLength < 0) {
        startingPosition = length - position;
        startingFieldLength = fieldLength;
        break;
      } else {
        startingPosition = 0;
        startingFieldLength = -1;
      }
      parseEventStreamLine(buffer, position, fieldLength, lineLength);
      position += lineLength + 1;
    }
    if (position === length) {
      buffer = "";
    } else if (position > 0) {
      buffer = buffer.slice(position);
    }
  }
  function parseEventStreamLine(lineBuffer, index, fieldLength, lineLength) {
    if (lineLength === 0) {
      if (data.length > 0) {
        onParse({
          type: "event",
          id: eventId,
          event: eventName || void 0,
          data: data.slice(0, -1)
          // remove trailing newline
        });
        data = "";
        eventId = void 0;
      }
      eventName = void 0;
      return;
    }
    const noValue = fieldLength < 0;
    const field = lineBuffer.slice(index, index + (noValue ? lineLength : fieldLength));
    let step = 0;
    if (noValue) {
      step = lineLength;
    } else if (lineBuffer[index + fieldLength + 1] === " ") {
      step = fieldLength + 2;
    } else {
      step = fieldLength + 1;
    }
    const position = index + step;
    const valueLength = lineLength - step;
    const value = lineBuffer.slice(position, position + valueLength).toString();
    if (field === "data") {
      data += value ? "".concat(value, "\n") : "\n";
    } else if (field === "event") {
      eventName = value;
    } else if (field === "id" && !value.includes("\0")) {
      eventId = value;
    } else if (field === "retry") {
      const retry = parseInt(value, 10);
      if (!Number.isNaN(retry)) {
        onParse({
          type: "reconnect-interval",
          value: retry
        });
      }
    }
  }
}
var BOM = [239, 187, 191];
function hasBom(buffer) {
  return BOM.every((charCode, index) => buffer.charCodeAt(index) === charCode);
}

// src/api.ts
var import_node_events = require("events");
var import_node_https = require("https");
function sanitize(text) {
  return [...text].map((c) => /^[\x00-\x7F]$/.test(c) ? c : c.split("").map((a) => "\\u" + a.charCodeAt(0).toString(16).padStart(4, "0")).join("")).join("");
}
var ERROR_SUFFIX = "Press to dismiss.";
var CHARS_PER_TOKEN = 3.35;
var ANTHROPIC_ENDPOINT = "https://api.anthropic.com";
var ANTHROPIC_PATH = "/v1/messages";
var OPENAI_ENDPOINT = "https://api.openai.com";
var OPENAI_PATH = "/v1/chat/completions";
var OPENROUTER_ENDPOINT = "https://openrouter.ai/api";
var TOGETHER_ENDPOINT = "https://api.together.xyz";
var COHERE_ENDPOINT = "https://api.cohere.ai";
var COHERE_PATH = "/v1/chat";
var ANTHROPIC_MODELS = {
  "claude-3-opus": "claude-3-opus-20240229",
  "claude-3-sonnet": "claude-3-sonnet-20240229",
  "claude-3-haiku": "claude-3-haiku-20240307"
};
var ANTHROPIC_SETTINGS = {
  temperature: "temperature",
  topK: "top_k",
  topP: "top_p"
};
var OPENAI_MODELS = {
  "gpt-4": "gpt-4",
  "gpt-4-turbo": "gpt-4-turbo-preview",
  "gpt-4-32k": "gpt-4-32k",
  "gpt-3.5-turbo": "gpt-3.5-turbo",
  "gpt-3.5-turbo-16k": "gpt-3.5-turbo-16k"
};
var OPENAI_SETTINGS = {
  temperature: "temperature",
  topK: "top_k",
  topP: "top_p",
  maxTokens: "max_tokens",
  frequencyPenalty: "frequency_penalty"
};
var COHERE_MODELS = {
  "command-r": "command-r",
  "command-r-plus": "command-r-plus"
};
var COHERE_SETTINGS = {
  temperature: "temperature",
  topK: "k",
  topP: "p",
  maxTokens: "max_tokens",
  frequencyPenalty: "frequency_penalty"
};
function formatSentance(text) {
  text = text.charAt(0).toUpperCase() + text.slice(1);
  if (text.charAt(text.length - 1) != ".") {
    text += ".";
  }
  return text;
}
function joinEndpoint(base, path) {
  if (base.charAt(base.length - 1) == path.charAt(0)) {
    base = base.slice(0, -1);
  }
  return base + path;
}
async function getMessages(history, target) {
  var _a;
  let messages = [];
  let contents = [];
  for (const [index, document2] of history.documents.entries()) {
    if (document2.mute) {
      continue;
    }
    const content = await ((_a = history.app) == null ? void 0 : _a.vault.read(document2.file));
    contents.push(
      `BEGIN DOCUMENT (${document2.file.path})
${content}
END DOCUMENT`
    );
  }
  for (const [index, entry] of history.entries.entries()) {
    if (target == entry) {
      break;
    }
    messages.push({
      role: entry.user ? "user" : "assistant",
      content: entry.content[entry.index]
    });
  }
  if (messages.length == 0) {
    messages.push({
      role: "user",
      content: ""
    });
  }
  const text = messages[0].content;
  if (contents.length > 0) {
    messages[0].content = `${contents.join("\n")}
BEGIN CHAT
${text}`;
  } else {
    messages[0].content = `BEGIN DOCUMENTS
NO SHARED DOCUMENTS
END DOCUMENTS
BEGIN CHAT
${text}`;
  }
  return messages;
}
async function getApproxTokens(history, settings) {
  const messages = await getMessages(
    history,
    history.entries[history.entries.length - 1]
  );
  let count = settings.systemPrompt.length;
  for (const message of messages) {
    count += message.content.length;
  }
  return Math.floor(count / CHARS_PER_TOKEN);
}
function getModel(settings, mapping) {
  let model = settings.apiModel;
  if (model == "custom") {
    model = settings.apiModelCustom;
  }
  if (model in mapping) {
    model = mapping[model];
  }
  return model;
}
function getContent(content, settings, mapping) {
  for (const [key, value] of Object.entries(mapping)) {
    if (key in settings && settings[key] != null) {
      content[value] = settings[key];
    }
  }
  return content;
}
function getAPI(settings) {
  switch (settings.apiProvider) {
    case "openai":
      return new OpenAIAPI(OPENAI_ENDPOINT);
    case "openrouter":
      return new OpenAIAPI(OPENROUTER_ENDPOINT);
    case "togetherai":
      return new OpenAIAPI(TOGETHER_ENDPOINT);
    case "openai-custom":
      return new OpenAIAPI(settings.apiEndpoint);
    case "anthropic":
      return new AnthropicAPI(ANTHROPIC_ENDPOINT);
    case "anthropic-custom":
      return new AnthropicAPI(settings.apiEndpoint);
    case "cohere":
      return new CohereAPI(COHERE_ENDPOINT);
  }
  return null;
}
var API = class {
  constructor(endpoint) {
    this.endpoint = endpoint;
    this.events = new import_node_events.EventEmitter();
  }
  async getEndpoint() {
    return this.endpoint;
  }
  async getBody(history, target, settings) {
    return "";
  }
  async getHeaders(settings) {
    return {};
  }
  async handleChunk(chunk, parser) {
    try {
      parser.feed(chunk);
    } catch (e) {
    }
  }
  async send(history, target, settings) {
    const url = await this.getEndpoint();
    const body = await this.getBody(history, target, settings);
    let headers = await this.getHeaders(settings);
    headers["charset"] = "UTF-8";
    headers["content-type"] = "application/json; charset=UTF-8";
    headers["content-length"] = body.length;
    const parser = createParser((event) => {
      var _a, _b;
      if (event.type != "event")
        return;
      const response = JSON.parse(event.data);
      const type = (_b = (_a = response.object) != null ? _a : response.type) != null ? _b : response.event_type;
      switch (type) {
        case "chat.completion.chunk":
        case "completion.chunk":
          let chunk = response.choices[0].delta.content;
          if (chunk != void 0) {
            this.events.emit("text", chunk);
          }
          break;
        case "content_block_start":
          if (response.content_block.type === "text") {
            this.events.emit("text", response.content_block.text);
          }
          break;
        case "content_block_delta":
          if (response.delta.type === "text_delta") {
            this.events.emit("text", response.delta.text);
          }
          break;
        case "text-generation":
          this.events.emit("text", response.text);
          break;
        default:
          break;
      }
    });
    this.request = (0, import_node_https.request)(
      url,
      {
        method: "POST",
        headers
      },
      async (response) => {
        var _a;
        const status = (_a = response.statusCode) != null ? _a : 0;
        this.events.emit("status", status);
        if (status == 200) {
          response.socket.setTimeout(0);
          response.setEncoding("utf8");
          response.on("data", async (chunk) => {
            await this.handleChunk(chunk, parser);
          });
          response.on("end", () => {
            this.events.emit("done");
          });
        } else {
          let data = "";
          response.on("data", (chunk) => {
            data += chunk;
          });
          response.on("close", () => {
            let title = `HTTP ${status} ${HTTPStatus[status]}`;
            let details = ERROR_SUFFIX;
            try {
              let err = formatSentance(
                JSON.parse(data).error.message
              );
              details = `${err}
${details}`;
            } catch (e) {
            }
            this.events.emit("error", `${title}
${details}`);
          });
        }
      }
    );
    this.request.on("error", (e) => {
      this.events.emit(
        "error",
        `Request Failed
${e.name}: ${formatSentance(
          e.message
        )}
${ERROR_SUFFIX}`
      );
    });
    this.request.on("timeout", (e) => {
      this.events.emit(
        "error",
        `Request Failed
Timeout
${ERROR_SUFFIX}`
      );
      this.events.emit("close");
    });
    this.request.on("close", () => {
      this.events.emit("close");
    });
    this.request.setTimeout(10 * 1e3);
    this.request.write(Buffer.from(body, "utf8"));
    this.request.end();
  }
  async abort() {
    if (this.request) {
      this.events.emit("abort");
      this.request.destroy();
    }
  }
};
var AnthropicAPI = class extends API {
  async getEndpoint() {
    return joinEndpoint(this.endpoint, ANTHROPIC_PATH);
  }
  async getBody(history, target, settings) {
    var _a;
    const messages = await getMessages(history, target);
    const content = getContent(
      {
        model: getModel(settings, ANTHROPIC_MODELS),
        messages,
        stream: true,
        system: settings.systemPrompt,
        max_tokens: (_a = settings.maxTokens) != null ? _a : 1024
      },
      settings,
      ANTHROPIC_SETTINGS
    );
    const body = sanitize(JSON.stringify(content));
    return body;
  }
  async getHeaders(settings) {
    const headers = {
      "anthropic-version": "2023-06-01",
      "anthropic-beta": "messages-2023-12-15",
      "x-api-key": settings.apiKey
    };
    return headers;
  }
};
var OpenAIAPI = class extends API {
  async getEndpoint() {
    return joinEndpoint(this.endpoint, OPENAI_PATH);
  }
  async getBody(history, target, settings) {
    const messages = await getMessages(history, target);
    if (settings.systemPrompt.trim().length != 0) {
      messages.unshift({
        role: "system",
        content: settings.systemPrompt
      });
    }
    const content = getContent(
      {
        model: getModel(settings, OPENAI_MODELS),
        messages,
        stream: true
      },
      settings,
      OPENAI_SETTINGS
    );
    const body = sanitize(JSON.stringify(content));
    return body;
  }
  async getHeaders(settings) {
    const headers = {
      accept: "application/json",
      authorization: `Bearer ${settings.apiKey}`
    };
    return headers;
  }
};
var CohereAPI = class extends API {
  async getEndpoint() {
    return joinEndpoint(this.endpoint, COHERE_PATH);
  }
  async getBody(history, target, settings) {
    let messages = await getMessages(history, target);
    let lastMessage = messages.last();
    messages.splice(messages.length - 1, 1);
    const roleMap = {
      user: "USER",
      assistant: "CHATBOT"
    };
    messages = messages.map((value) => {
      return { role: roleMap[value.role], message: value.content };
    });
    let request2 = {
      model: getModel(settings, COHERE_MODELS),
      message: lastMessage.content,
      chat_history: messages,
      stream: true
    };
    if (settings.systemPrompt.trim().length != 0) {
      request2.preamble = settings.systemPrompt;
    }
    const content = getContent(request2, settings, COHERE_SETTINGS);
    const body = sanitize(JSON.stringify(content));
    return body;
  }
  async getHeaders(settings) {
    const headers = {
      accept: "application/json",
      authorization: `Bearer ${settings.apiKey}`
    };
    return headers;
  }
  async handleChunk(chunk, parser) {
    var _a;
    chunk = ((_a = this.currentChunk) != null ? _a : "") + chunk;
    this.currentChunk = "";
    let chunks = chunk.split("\n");
    let lastChunk = chunks.pop();
    if (lastChunk.length != 0) {
      this.currentChunk = lastChunk;
    }
    for (let chunk2 of chunks) {
      parser.feed(`event: cohere
data:${chunk2}

`);
    }
  }
};

// src/view.ts
var VIEW_TYPE_CHAT = "arenasys-ai-chat-view";
function setIcon(el, name) {
  var _a;
  el.empty();
  el.appendChild((_a = (0, import_obsidian.getIcon)(name)) != null ? _a : (0, import_obsidian.getIcon)("bug"));
}
var ChatView = class extends import_obsidian.ItemView {
  constructor(leaf, profiles) {
    super(leaf);
    this.profiles = profiles;
  }
  getSettings() {
    return this.profiles.settings[this.profiles.current];
  }
  getViewType() {
    return VIEW_TYPE_CHAT;
  }
  getDisplayText() {
    return "Chat";
  }
  getIcon() {
    return "message-square";
  }
  setWorking(working) {
    this.working = working;
    this.syncGenerateButtonToDom();
  }
  async setText(el, text) {
    el.empty();
    const lines = text.split("\n");
    for (const [index, line] of lines.entries()) {
      el.appendText(line);
      if (index != lines.length - 1) {
        el.createEl("br");
      }
    }
  }
  async setMarkdown(el, text) {
    const tmp = document.createElement("div");
    await import_obsidian.MarkdownRenderer.render(this.app, text, tmp, "", this);
    el.empty();
    const length = tmp.children.length;
    for (var i = 0; i < length; i++) {
      const thisNode = tmp.children[0];
      const nextNode = tmp.children[1];
      el.appendChild(thisNode);
      if ((thisNode == null ? void 0 : thisNode.tagName) == "P" && (nextNode == null ? void 0 : nextNode.tagName) == "P") {
        el.appendChild(document.createElement("br"));
      }
    }
  }
  addPlainPaste(element) {
    element.addEventListener("paste", (event) => {
      var _a;
      event.preventDefault();
      const text = (_a = event.clipboardData) == null ? void 0 : _a.getData("text/plain");
      if (text) {
        document.execCommand("insertText", false, text);
      }
    });
  }
  addEntry(entry) {
    const container = this.entryContainer;
    entry.element = container.createEl("div", { cls: "asys__entry" });
    entry.element.addClass(entry.user ? "asys__right" : "asys__left");
    const controls = entry.element.createEl("div", {
      cls: "asys__controls"
    });
    const content = entry.element.createEl("div", {
      cls: "asys__content"
    });
    content.addEventListener("input", (event) => {
      this.syncEntryFromDom(entry);
    });
    const editButton = controls.createEl("button", {
      cls: "asys__icon clickable-icon"
    });
    setIcon(editButton, "more-horizontal");
    editButton.addEventListener("click", (event) => {
      if (this.editSkip) {
        this.editSkip = false;
        return;
      }
      entry.edit = true;
      this.editOriginal = entry.content[entry.index];
      this.editRevert = false;
      this.syncEntryToDom(entry);
      content.focus();
    });
    if (!entry.user) {
      const label = controls.createEl("span", { cls: "asys__label" });
      const leftButton = controls.createEl("button", {
        cls: "asys__icon clickable-icon"
      });
      setIcon(leftButton, "chevron-left");
      leftButton.addEventListener("click", (event) => {
        if (entry.index - 1 >= 0) {
          entry.index -= 1;
          this.syncEntryToDom(entry);
        }
      });
      const rightButton = controls.createEl("button", {
        cls: "asys__icon clickable-icon"
      });
      setIcon(rightButton, "chevron-right");
      rightButton.addEventListener("click", (event) => {
        if (entry.index + 1 < entry.content.length) {
          entry.index += 1;
          this.syncEntryToDom(entry);
        } else {
          this.redoResponse(entry);
        }
      });
    }
    const trashButton = controls.createEl("button", {
      cls: "asys__icon clickable-icon asys__red"
    });
    let clicked = false;
    setIcon(trashButton, "x");
    trashButton.addEventListener("click", (event) => {
      if (clicked) {
        this.removeEntry(entry);
      } else if (!this.editRevert) {
        clicked = true;
        setIcon(trashButton, "check");
        setTimeout(() => {
          clicked = false;
          setIcon(trashButton, "x");
        }, 500);
      } else {
        this.editRevert = false;
      }
    });
    trashButton.addEventListener("contextmenu", (event) => {
      if (trashButton.ariaDisabled === "true") {
        return;
      }
      this.entryMenuIndex = this.history.entries.indexOf(entry);
      const rect = trashButton.getBoundingClientRect();
      this.entryMenu.showAtPosition({ x: rect.right, y: rect.bottom });
    });
    content.addEventListener("focusout", (event) => {
      this.editSkip = event.relatedTarget == editButton;
      this.editRevert = event.relatedTarget == trashButton;
      entry.edit = false;
      this.syncEntryToDom(entry);
    });
    this.addPlainPaste(content);
    entry.element.addEventListener("mouseover", (event) => {
      if (entry == this.history.entries[this.history.entries.length - 1]) {
        this.tokenContainer.removeClass("asys__hidden");
      }
    });
    entry.element.addEventListener("mouseout", (event) => {
      if (entry == this.history.entries[this.history.entries.length - 1]) {
        this.tokenContainer.addClass("asys__hidden");
      }
    });
    this.syncEntryToDom(entry);
    this.history.entries.push(entry);
    return entry;
  }
  removeEntry(entry) {
    try {
      if (entry == this.history.entries[this.history.entries.length - 1]) {
        this.tokenContainer.addClass("asys__hidden");
      }
      this.entryContainer.removeChild(entry.element);
      this.history.entries.remove(entry);
    } catch (e) {
    }
  }
  cleanEntry(entry) {
    entry.new = null;
    if (entry.content.length == 0) {
      this.removeEntry(entry);
    } else {
      entry.index = entry.content.length - 1;
      this.syncEntryToDom(entry);
    }
  }
  finishEntry(entry) {
    if (entry.new != null) {
      entry.content.push(entry.new);
      entry.index = entry.content.length - 1;
      entry.new = null;
      this.syncEntryToDom(entry);
    }
  }
  async syncEntryToDom(entry) {
    var _a, _b;
    const controls = entry.element.children[0];
    const editButton = controls.children[0];
    const trashButton = controls.lastElementChild;
    const content = entry.element.children[1];
    const editing = content.getAttribute("contenteditable") == "true";
    if (editing && !entry.edit) {
      if (this.editRevert) {
        entry.content[entry.index] = this.editOriginal;
      }
      (_a = entry.element) == null ? void 0 : _a.removeClass("asys__edit");
      setIcon(editButton, "more-horizontal");
      editButton.removeClass("asys__green");
      editButton.ariaLabel = "Edit";
      trashButton.ariaLabel = "Delete";
    }
    if (!editing && entry.edit) {
      (_b = entry.element) == null ? void 0 : _b.addClass("asys__edit");
      setIcon(editButton, "check");
      editButton.addClass("asys__green");
    }
    content.setAttribute("contenteditable", entry.edit ? "true" : "false");
    const invalid = entry.content.length == 0 || entry.index >= entry.content.length;
    const working = entry.new != null;
    const waiting = entry.new != null && entry.new.length != 0;
    if (invalid && !waiting) {
      content.setText("...");
    } else {
      const text = waiting ? entry.new : entry.content[entry.index];
      if (entry.edit) {
        await this.setText(content, text);
      } else {
        await this.setMarkdown(content, text);
      }
    }
    editButton.ariaLabel = entry.edit ? "Accept" : "Edit";
    editButton.ariaDisabled = invalid || working ? "true" : "false";
    trashButton.ariaLabel = entry.edit ? "Revert" : "Delete";
    trashButton.ariaDisabled = invalid || working ? "true" : "false";
    if (!entry.user) {
      const label = controls.children[1];
      label.setText(
        entry.content.length == 0 ? "" : `${entry.index + 1} of ${entry.content.length}`
      );
      const leftButton = controls.children[2];
      leftButton.ariaDisabled = entry.index == 0 || invalid || entry.edit ? "true" : "false";
      leftButton.ariaLabel = "Previous";
      const rightButton = controls.children[3];
      rightButton.ariaDisabled = invalid || entry.edit ? "true" : "false";
      rightButton.ariaLabel = "Next";
    }
  }
  syncEntryFromDom(entry) {
    const content = entry.element.children[1];
    entry.content[entry.index] = content.innerText;
  }
  addDocument(file, append = true) {
    const row = document.createElement("div");
    row.addClass("asys__document-row");
    const element = row.createDiv({ cls: "asys__document" });
    const doc = {
      file,
      element: row,
      pin: false,
      mute: false
    };
    if (append || this.documentContainer.children.length == 0) {
      this.documentContainer.appendChild(row);
      this.history.documents.push(doc);
    } else {
      this.documentContainer.insertBefore(
        row,
        this.documentContainer.firstChild
      );
      this.history.documents.unshift(doc);
    }
    const mute = element.createEl("button", {
      cls: "asys__mute asys__toggle asys__icon clickable-icon"
    });
    mute.ariaLabel = "Hide/Unhide document";
    setIcon(mute, "eye");
    mute.addEventListener("click", (event) => {
      if (doc.mute) {
        mute.removeClass("asys__toggled");
        setIcon(mute, "eye");
        doc.mute = false;
      } else {
        mute.addClass("asys__toggled");
        setIcon(mute, "eye-off");
        doc.mute = true;
      }
    });
    const pin = element.createEl("button", {
      cls: "asys__pin asys__toggle asys__icon clickable-icon"
    });
    pin.ariaLabel = "Pin/Unpin document";
    setIcon(pin, "pin-off");
    pin.addEventListener("click", (event) => {
      if (doc.pin) {
        pin.removeClass("asys__toggled");
        doc.pin = false;
        setIcon(pin, "pin-off");
        const isFirst = doc == this.history.documents[0];
        if (!isFirst) {
          this.removeDocument(doc);
        }
        const current = this.app.workspace.getActiveFile();
        if (current) {
          this.setCurrentDocument(current);
        }
      } else {
        pin.addClass("asys__toggled");
        setIcon(pin, "pin");
        doc.pin = true;
      }
    });
    const content = element.createDiv();
    this.syncDocumentToDom(doc);
  }
  removeDocument(doc) {
    this.history.documents.remove(doc);
    this.documentContainer.removeChild(doc.element);
  }
  setCurrentDocument(file) {
    if (this.history.documents.length == 0) {
      this.addDocument(file);
    }
    const exists = this.history.documents.some((document2, index) => {
      return document2.file == file && document2.pin;
    });
    if (!exists) {
      if (!this.history.documents[0].pin) {
        this.history.documents[0].file = file;
        this.syncDocumentToDom(this.history.documents[0]);
      } else {
        this.addDocument(file, false);
      }
    } else if (!this.history.documents[0].pin) {
      const doc = this.history.documents[0];
      this.history.documents.remove(doc);
      this.documentContainer.removeChild(doc.element);
    }
  }
  syncDocumentToDom(document2) {
    const row = document2.element;
    const element = row.children[0];
    const pin = element.children[0];
    const mute = element.children[1];
    const content = element.children[2];
    content.setText(document2.file.path);
  }
  checkCurrentDocument() {
    if (this.history.documents.length > 0) {
      const document2 = this.history.documents[0];
      const element = document2.element;
      const current = element.innerText;
      const target = document2.file.path;
      if (current != target) {
        this.syncDocumentToDom(document2);
      }
    }
  }
  async checkCurrentTokens() {
    const tokens = await getApproxTokens(this.history, this.getSettings());
    this.tokenContainer.setText(`${tokens} Tokens`);
  }
  syncGenerateButtonToDom() {
    const button = this.inputContainer.children[0];
    if (this.working) {
      button.addClass("asys__working");
      setIcon(button, "square");
    } else {
      button.removeClass("asys__working");
      setIcon(button, "play");
    }
  }
  snapToBottom() {
    const background = this.containerEl.children[1];
    background.scrollTop = background.scrollHeight;
  }
  async hidePopup() {
    this.popupContainer.removeClass("asys__fadeIn");
    this.popupContainer.addClass("asys__fadeOut");
  }
  async showPopup(message) {
    await this.setText(this.popupContainer, message);
    this.popupContainer.removeClass("asys__fadeOut");
    this.popupContainer.addClass("asys__fadeIn");
    this.popupContainer.addEventListener("click", (event) => {
      this.hidePopup();
    });
  }
  async redoResponse(entry) {
    entry.index = entry.content.length;
    this.syncEntryToDom(entry);
    this.makeRequest(entry);
  }
  async getResponse() {
    const response = this.addEntry({
      user: false,
      edit: false,
      new: null,
      index: 0,
      content: []
    });
    this.makeRequest(response);
  }
  async handleInput(input) {
    const isEmpty = input.trim().length == 0;
    const lastEntry = this.history.entries[this.history.entries.length - 1];
    if (lastEntry && lastEntry.user) {
      if (!isEmpty) {
        lastEntry.content[lastEntry.index] += `
${input}`;
        this.syncEntryToDom(lastEntry);
      }
      this.getResponse();
    } else {
      if (!isEmpty) {
        this.addEntry({
          user: true,
          edit: false,
          new: null,
          index: 0,
          content: [input]
        });
        this.getResponse();
      }
    }
  }
  async makeRequest(entry) {
    this.setWorking(true);
    const settings = this.getSettings();
    const isLast = entry == this.history.entries[this.history.entries.length - 1];
    this.api = getAPI(settings);
    this.api.events.on("text", (text) => {
      if (text.length == 0) {
        return;
      }
      if (entry.new == null) {
        entry.new = "";
      }
      entry.new += text;
      this.syncEntryToDom(entry);
      if (isLast) {
        this.snapToBottom();
      }
    });
    this.api.events.on("status", (status) => {
      if (status != 200) {
        if (isLast) {
          this.snapToBottom();
        }
      }
    });
    this.api.events.on("done", () => {
      this.finishEntry(entry);
    });
    this.api.events.on("error", (error) => {
      entry.new = null;
      this.cleanEntry(entry);
      this.syncEntryToDom(entry);
      this.showPopup(error);
    });
    this.api.events.on("abort", () => {
      this.finishEntry(entry);
    });
    this.api.events.on("close", () => {
      this.cleanEntry(entry);
      this.setWorking(false);
    });
    await this.api.send(this.history, entry, settings);
    return;
  }
  async abortRequest() {
    if (this.working && this.api) {
      await this.api.abort();
    }
  }
  async addChat() {
    this.history = {
      entries: [],
      documents: [],
      app: this.app
    };
    const background = this.containerEl.children[1];
    background.addClass("asys__background");
    background.empty();
    this.entryContainer = background.createEl("div", {
      cls: "asys__entries"
    });
    const tmp = this.entryContainer.createEl("div");
    const settings = tmp.createEl("button", {
      cls: "asys__settings clickable-icon view-action"
    });
    settings.ariaLabel = "More options";
    this.documentContainer = tmp.createEl("div");
    setIcon(settings, "more-vertical");
    const settingsMenu = new import_obsidian.Menu();
    settingsMenu.addItem((item) => {
      item.setIcon("settings");
      item.setTitle("Open settings");
      item.onClick((e) => {
        this.app.setting.open();
        if (this.app.setting.lastTabId !== PLUGIN_ID)
          this.app.setting.openTabById(PLUGIN_ID);
      });
    });
    settingsMenu.addSeparator();
    settingsMenu.addItem((item) => {
      item.setIcon("trash");
      item.setTitle("Clear chat");
      item.setWarning(true);
      item.onClick((e) => {
        this.addChat();
      });
    });
    settings.addEventListener("mousedown", (event) => {
      if (this.menuOpen) {
        this.menuSkip = true;
      }
    });
    settings.addEventListener("click", (event) => {
      if (this.menuSkip) {
        this.menuSkip = false;
        return;
      }
      const rect = settings.getBoundingClientRect();
      settingsMenu.showAtPosition({ x: rect.right, y: rect.bottom });
      this.menuOpen = true;
    });
    settingsMenu.onHide(() => {
      this.menuOpen = false;
    });
    this.entryMenu = new import_obsidian.Menu();
    this.entryMenu.addItem((item) => {
      item.setIcon("trash");
      item.setTitle("Delete below");
      item.setWarning(true);
      item.onClick((e) => {
        let idx = this.entryMenuIndex + 1;
        while (idx < this.history.entries.length) {
          const before = this.history.entries.length;
          this.removeEntry(this.history.entries[idx]);
          if (before == this.history.entries.length) {
            break;
          }
        }
      });
    });
    const current = this.app.workspace.getActiveFile();
    if (current) {
      this.setCurrentDocument(current);
    }
    this.tokenContainer = background.createDiv({
      cls: "asys__tokens asys__hidden"
    });
    this.inputContainer = background.createDiv({
      cls: "asys__input-container"
    });
    const inputButton = this.inputContainer.createEl("button", {
      cls: "asys__icon asys__input-button clickable-icon"
    });
    inputButton.ariaLabel = "Stop";
    setIcon(inputButton, "play");
    inputButton.addEventListener("click", async (event) => {
      if (this.working) {
        this.abortRequest();
      }
    });
    const input = this.inputContainer.createDiv({ cls: "asys__input" });
    input.setAttribute("contenteditable", "true");
    input.setAttribute("placeholder", "Ask something...");
    input.addEventListener("keydown", async (event) => {
      if (event.key === "Enter" && !event.shiftKey) {
        await this.hidePopup();
        if (!this.working) {
          await this.handleInput(input.innerText);
          input.empty();
        }
        event.preventDefault();
      }
    });
    input.addEventListener("input", (event) => {
      this.snapToBottom();
      if (input.innerText == "\n") {
        input.empty();
      }
    });
    this.addPlainPaste(input);
    this.popupContainer = background.createEl("div", {
      cls: "asys__popup asys__fadeOut"
    });
  }
  async onOpen() {
    await this.addChat();
    this.registerEvent(
      this.app.workspace.on("file-open", (file) => {
        this.setCurrentDocument(file);
        this.checkCurrentTokens();
      })
    );
    this.registerInterval(
      window.setInterval(() => this.checkCurrentDocument(), 1e3)
    );
    this.registerInterval(
      window.setInterval(() => this.checkCurrentTokens(), 5e3)
    );
  }
  async onClose() {
  }
};

// src/settings.ts
var import_obsidian2 = require("obsidian");
var DEFAULT_SETTINGS = {
  current: 0,
  names: ["Default"],
  settings: [
    {
      apiProvider: "openai",
      apiModel: "gpt-4",
      apiModelCustom: "",
      apiKey: "",
      apiEndpoint: "",
      systemPrompt: "You are an assistant in Obsidian, a note-taking program. Shared notes/documents are provided. Dont show the document formatting (BEGIN DOCUMENT etc).",
      maxTokens: null,
      temperature: null,
      topK: null,
      topP: null,
      frequencyPenalty: null
    }
  ]
};
var PROVIDERS = {
  anthropic: "Anthropic",
  openai: "OpenAI",
  cohere: "Cohere",
  openrouter: "OpenRouter",
  togetherai: "TogetherAI",
  "openai-custom": "OpenAI compatible",
  "anthropic-custom": "Anthropic compatible"
};
var PROVIDER_MODELS = {
  anthropic: {
    "claude-3-opus": "Claude 3 Opus",
    "claude-3-sonnet": "Claude 3 Sonnet",
    "claude-3-haiku": "Claude 3 Haiku"
  },
  openai: {
    "gpt-4": "GPT-4",
    "gpt-4-turbo": "GPT-4 Turbo",
    "gpt-3.5-turbo": "GPT-3.5 Turbo"
  },
  cohere: {
    "command-r": "Command R",
    "command-r-plus": "Command R+"
  },
  openrouter: {},
  togetherai: {},
  "openai-custom": {},
  "anthropic-custom": {}
};
var ChatSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  isNameAvailable(name) {
    return name.length > 0 && !this.plugin.profiles.names.includes(name);
  }
  addSetting(name = "") {
    if (name.length == 0) {
      name = DEFAULT_SETTINGS.names[0];
    }
    const settings = {
      ...DEFAULT_SETTINGS.settings[0]
    };
    this.plugin.profiles.names.push(name);
    this.plugin.profiles.settings.push(settings);
    this.plugin.profiles.current = this.plugin.profiles.names.length - 1;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const currentIndex = this.plugin.profiles.current;
    const currentName = this.plugin.profiles.names[currentIndex];
    const currentSettings = this.plugin.profiles.settings[currentIndex];
    const profileNames = this.plugin.profiles.names.reduce(
      (a, v) => ({ ...a, [v]: v }),
      {}
    );
    new import_obsidian2.Setting(containerEl).setHeading().setName("Profile").setClass("asys__setting-heading");
    new import_obsidian2.Setting(containerEl).setName("Current profile").addDropdown(async (component) => {
      component.selectEl.addClass("asys__setting-medium");
      component.addOptions(profileNames);
      component.setValue(currentName);
      component.onChange(async (value2) => {
        const idx = this.plugin.profiles.names.indexOf(value2);
        this.plugin.profiles.current = idx;
        await this.plugin.saveSettings();
        await this.display();
      });
    });
    let renameName = "";
    new import_obsidian2.Setting(containerEl).setName("Edit profile").addButton((component) => {
      component.buttonEl.addClass("asys__setting-small");
      component.setButtonText("Delete");
      component.onClick(async () => {
        this.plugin.profiles.names.splice(currentIndex, 1);
        this.plugin.profiles.settings.splice(currentIndex, 1);
        this.plugin.profiles.current = Math.max(
          currentIndex - 1,
          0
        );
        if (this.plugin.profiles.names.length == 0) {
          this.addSetting();
        }
        await this.plugin.saveSettings();
        await this.display();
      });
    }).addText((component) => {
      component.inputEl.addClass("asys__setting-name");
      component.setPlaceholder("Name");
      component.onChange((value2) => {
        renameName = value2;
      });
    }).addButton((component) => {
      component.buttonEl.addClass("asys__setting-small");
      component.setButtonText("Rename");
      component.onClick(async () => {
        if (this.isNameAvailable(renameName)) {
          this.plugin.profiles.names[currentIndex] = renameName;
          await this.plugin.saveSettings();
          await this.display();
        }
      });
    });
    let newName = "";
    new import_obsidian2.Setting(containerEl).setName("New profile").addText((component) => {
      component.inputEl.addClass("asys__setting-name");
      component.setPlaceholder("Name");
      component.onChange((value2) => {
        newName = value2;
      });
    }).addButton((component) => {
      component.buttonEl.addClass("asys__setting-small");
      component.setButtonText("New");
      component.onClick(async () => {
        if (this.isNameAvailable(newName)) {
          this.addSetting(newName);
          await this.plugin.saveSettings();
          await this.display();
        }
      });
    });
    new import_obsidian2.Setting(containerEl).setHeading().setName("Configure").setClass("asys__setting-heading");
    new import_obsidian2.Setting(containerEl).setName("API provider").addDropdown((component) => {
      component.selectEl.addClass("asys__setting-medium");
      component.addOptions(PROVIDERS).setValue(currentSettings.apiProvider).onChange(async (value2) => {
        currentSettings.apiProvider = value2;
        currentSettings.apiModel = "custom";
        for (var value2 in PROVIDER_MODELS[value2]) {
          currentSettings.apiModel = value2;
          break;
        }
        await this.plugin.saveSettings();
        await this.display();
      });
    });
    let provider = currentSettings.apiProvider;
    if (provider.endsWith("custom")) {
      new import_obsidian2.Setting(containerEl).setName("API endpoint").setDesc(
        provider == "openai-custom" ? "Any OpenAI compatible endpoint." : "Any Anthropic compatible endpoint."
      ).addText((component) => {
        component.inputEl.addClass("asys__setting-medium");
        component.setPlaceholder("Enter a url").setValue(currentSettings.apiEndpoint).onChange(async (value2) => {
          currentSettings.apiEndpoint = value2;
          await this.plugin.saveSettings();
        });
      });
    }
    let current = currentSettings.apiModel;
    let available = {
      ...PROVIDER_MODELS[currentSettings.apiProvider],
      custom: "Custom"
    };
    if (!(current in available)) {
      for (var value in available) {
        current = value;
        break;
      }
      currentSettings.apiModel = current;
      this.plugin.saveSettings();
    }
    const modelSetting = new import_obsidian2.Setting(containerEl).setName("API model").addDropdown((component) => {
      if (current != "custom") {
        component.selectEl.addClass("asys__setting-medium");
      }
      component.addOptions(available).setValue(current).onChange(async (value2) => {
        currentSettings.apiModel = value2;
        await this.plugin.saveSettings();
        await this.display();
      });
    });
    if (currentSettings.apiModel.endsWith("custom")) {
      modelSetting.addText((text) => {
        text.inputEl.addClass("asys__setting-medium");
        text.setPlaceholder("Enter a model name").setValue(currentSettings.apiModelCustom).onChange(async (value2) => {
          currentSettings.apiModelCustom = value2;
          await this.plugin.saveSettings();
        });
      });
    }
    new import_obsidian2.Setting(containerEl).setName("API key").addText((text) => {
      text.inputEl.addClass("asys__setting-medium");
      text.setPlaceholder("Enter your key").setValue(currentSettings.apiKey).onChange(async (value2) => {
        currentSettings.apiKey = value2;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(containerEl).setName("System prompt").addTextArea((text) => {
      text.setValue(currentSettings.systemPrompt);
      text.onChange(async (value2) => {
        currentSettings.systemPrompt = value2;
        await this.plugin.saveSettings();
      });
      text.inputEl.addClass("asys__setting-prompt");
      text.setPlaceholder("Default");
    });
    new import_obsidian2.Setting(containerEl).setName("Max tokens").addText((text) => {
      var _a, _b;
      text.inputEl.addClass("asys__setting-medium");
      text.setPlaceholder("Default").setValue((_b = (_a = currentSettings.maxTokens) == null ? void 0 : _a.toFixed(0)) != null ? _b : "").onChange(async (value2) => {
        currentSettings.maxTokens = Number.parseInt(value2);
        if (!Number.isFinite(currentSettings.maxTokens)) {
          currentSettings.maxTokens = null;
        }
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(containerEl).setName("Temperature").addText((text) => {
      var _a, _b;
      text.inputEl.addClass("asys__setting-medium");
      text.setPlaceholder("Default").setValue((_b = (_a = currentSettings.temperature) == null ? void 0 : _a.toFixed(2)) != null ? _b : "").onChange(async (value2) => {
        currentSettings.temperature = Number.parseFloat(value2);
        if (!Number.isFinite(currentSettings.temperature)) {
          currentSettings.temperature = null;
        }
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(containerEl).setName("Top K").addText((text) => {
      var _a, _b;
      text.inputEl.addClass("asys__setting-medium");
      text.setPlaceholder("Default").setValue((_b = (_a = currentSettings.topK) == null ? void 0 : _a.toFixed(2)) != null ? _b : "").onChange(async (value2) => {
        currentSettings.topK = Number.parseFloat(value2);
        if (!Number.isFinite(currentSettings.topK)) {
          currentSettings.topK = null;
        }
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(containerEl).setName("Top P").addText((text) => {
      var _a, _b;
      text.inputEl.addClass("asys__setting-medium");
      text.setPlaceholder("Default").setValue((_b = (_a = currentSettings.topP) == null ? void 0 : _a.toFixed(2)) != null ? _b : "").onChange(async (value2) => {
        currentSettings.topP = Number.parseFloat(value2);
        if (!Number.isFinite(currentSettings.topP)) {
          currentSettings.topP = null;
        }
        await this.plugin.saveSettings();
      });
    });
    if (currentSettings.apiProvider != "anthropic") {
      new import_obsidian2.Setting(containerEl).setName("Frequency penalty").addText((text) => {
        var _a, _b;
        text.inputEl.addClass("asys__setting-medium");
        text.setPlaceholder("Default").setValue(
          (_b = (_a = currentSettings.frequencyPenalty) == null ? void 0 : _a.toFixed(2)) != null ? _b : ""
        ).onChange(async (value2) => {
          currentSettings.frequencyPenalty = Number.parseFloat(value2);
          if (!Number.isFinite(
            currentSettings.frequencyPenalty
          )) {
            currentSettings.frequencyPenalty = null;
          }
          await this.plugin.saveSettings();
        });
      });
    }
  }
};

// src/main.ts
var ChatPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_CHAT,
      (leaf) => new ChatView(leaf, this.profiles)
    );
    await this.activateView();
    this.addCommand({
      id: "ai-chat-show-chat",
      name: "Show chat",
      callback: async () => {
        const { workspace } = this.app;
        let leaves = workspace.getLeavesOfType(VIEW_TYPE_CHAT);
        if (leaves.length == 0) {
          const leaf = this.app.workspace.getRightLeaf(false);
          await (leaf == null ? void 0 : leaf.setViewState({
            type: VIEW_TYPE_CHAT,
            active: false
          }));
          leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_CHAT);
        }
        if (leaves.length != 0) {
          this.app.workspace.revealLeaf(leaves[0]);
        }
      }
    });
    this.addSettingTab(new ChatSettingTab(this.app, this));
  }
  onunload() {
  }
  async activateView() {
    const { workspace } = this.app;
    workspace.onLayoutReady(async () => {
      let leaf = null;
      const leaves = workspace.getLeavesOfType(VIEW_TYPE_CHAT);
      if (leaves.length == 0) {
        leaf = workspace.getRightLeaf(false);
        await (leaf == null ? void 0 : leaf.setViewState({
          type: VIEW_TYPE_CHAT,
          active: false
        }));
      }
    });
  }
  async loadSettings() {
    let saved = {};
    try {
      saved = await this.loadData();
    } catch (e) {
      console.log("Failed to load settings", e);
    }
    this.profiles = Object.assign({}, DEFAULT_SETTINGS, saved);
  }
  async saveSettings() {
    await this.saveData(this.profiles);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
//# sourceMappingURL=data:application/json;base64,
